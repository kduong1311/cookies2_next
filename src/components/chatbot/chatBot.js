import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, ChefHat, Loader2, Minimize2 } from 'lucide-react';

const ChatBot = ({ apiKey }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Tin nh·∫Øn ch√†o m·ª´ng
  const welcomeMessage = {
    id: 'welcome',
    role: 'assistant',
    content: `Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω n·∫•u ƒÉn AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

üç≥ T∆∞ v·∫•n c√¥ng th·ª©c n·∫•u ƒÉn
ü•ò Thay th·∫ø nguy√™n li·ªáu
‚è∞ H∆∞·ªõng d·∫´n th·ªùi gian n·∫•u
üçΩÔ∏è G·ª£i √Ω m√≥n ƒÉn theo nguy√™n li·ªáu c√≥ s·∫µn
üìù Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ k·ªπ thu·∫≠t n·∫•u ƒÉn

B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ n·∫•u ƒÉn kh√¥ng?`,
    timestamp: new Date().toLocaleTimeString()
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Kh·ªüi t·∫°o tin nh·∫Øn ch√†o m·ª´ng khi m·ªü chat l·∫ßn ƒë·∫ßu
    if (isOpen && messages.length === 0) {
      setMessages([welcomeMessage]);
    }
  }, [isOpen]);

  const createCookingPrompt = (userMessage) => {
    return `B·∫°n l√† m·ªôt chuy√™n gia n·∫•u ƒÉn AI th√¢n thi·ªán v√† chuy√™n nghi·ªáp. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau v·ªÅ n·∫•u ƒÉn m·ªôt c√°ch chi ti·∫øt v√† h·ªØu √≠ch. S·ª≠ d·ª•ng ti·∫øng Vi·ªát v√† cung c·∫•p l·ªùi khuy√™n th·ª±c t·∫ø:

C√¢u h·ªèi: ${userMessage}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch nhi·ªát t√¨nh v√† h·ªØu √≠ch, bao g·ªìm:
- H∆∞·ªõng d·∫´n chi ti·∫øt n·∫øu c·∫ßn
- M·∫πo v√† l∆∞u √Ω quan tr·ªçng
- Th·ªùi gian chu·∫©n b·ªã v√† n·∫•u (n·∫øu c√≥)
- G·ª£i √Ω thay th·∫ø nguy√™n li·ªáu (n·∫øu ph√π h·ª£p)

Gi·ªØ cho c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.`;
  };

  const sendMessage = async () => {
    if (!input.trim() || !apiKey) return;

    const userMessage = { 
      id: Date.now(), 
      role: 'user', 
      content: input,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const cookingPrompt = createCookingPrompt(input);
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: cookingPrompt
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI');
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0]) {
        const botMessage = {
          id: Date.now() + 1,
          role: 'assistant',
          content: data.candidates[0].content.parts[0].text,
          timestamp: new Date().toLocaleTimeString()
        };
        setMessages(prev => [...prev, botMessage]);
      } else {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ tr·ª£ l√Ω');
      }
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        role: 'assistant',
        content: `Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng? üòÖ\n\nL·ªói: ${error.message}`,
        timestamp: new Date().toLocaleTimeString(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setIsMinimized(false);
  };

  const minimizeChat = () => {
    setIsMinimized(true);
  };

  const formatMessage = (content) => {
    return content.split('\n').map((line, index) => (
      <span key={index}>
        {line}
        {index < content.split('\n').length - 1 && <br />}
      </span>
    ));
  };

  // Suggested questions
  const suggestedQuestions = [
    "C√°ch l√†m ph·ªü b√≤ ngon t·∫°i nh√†?",
    "Thay th·∫ø g√¨ cho b∆° khi l√†m b√°nh?",
    "M√≥n ƒÉn nhanh v·ªõi tr·ª©ng v√† c∆°m?",
    "C√°ch kh·ª≠ m√πi tanh c·ªßa c√°?"
  ];

  const handleSuggestedQuestion = (question) => {
    setInput(question);
    inputRef.current?.focus();
  };


  return (
    <div className="fixed bottom-6 right-6 z-[9999] text-white">
      {!isOpen && (
        <button
          onClick={toggleChat}
          className="w-16 h-16 bg-orange-600 hover:bg-orange-700 rounded-full shadow-lg transition-all flex items-center justify-center group hover:scale-110"
        >
          <MessageCircle className="w-8 h-8 text-white group-hover:scale-110 transition-transform" />
          <div className="absolute -top-2 -right-2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
            <ChefHat className="w-3 h-3 text-white" />
          </div>
        </button>
      )}

      {isOpen && (
        <div className={`w-105 bg-gray-900 text-white rounded-2xl shadow-2xl border border-gray-700 overflow-hidden transition-all duration-300 ${
          isMinimized ? 'h-26' : 'h-125'
        }`}>
          <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <ChefHat className="w-6 h-6" />
                <div>
                  <h3 className="font-semibold">Tr·ª£ l√Ω n·∫•u ƒÉn AI</h3>
                  <p className="text-xs opacity-90">{isLoading ? 'ƒêang suy nghƒ©...' : 'S·∫µn s√†ng h·ªó tr·ª£'}</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button onClick={minimizeChat} className="p-1 hover:bg-white/10 rounded">
                  <Minimize2 className="w-4 h-4 text-white" />
                </button>
                <button onClick={toggleChat} className="p-1 hover:bg-white/10 rounded">
                  <X className="w-4 h-4 text-white" />
                </button>
              </div>
            </div>
          </div>

          {!isMinimized && (
            <>
              <div className="h-91 overflow-y-auto p-4 space-y-3 bg-gray-800 hide-scrollbar">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs px-3 py-2 rounded-2xl text-sm ${
                      message.role === 'user'
                        ? 'bg-orange-600 text-white rounded-br-md'
                        : message.isError
                        ? 'bg-red-800 text-red-100 border border-red-400 rounded-bl-md'
                        : 'bg-gray-700 text-white border border-gray-600 rounded-bl-md'
                    }`}>
                      <div>{formatMessage(message.content)}</div>
                      <div className="text-xs mt-1 opacity-70">
                        {message.timestamp}
                      </div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex justify-start">
                    <div className="max-w-xs px-3 py-2 rounded-2xl bg-gray-700 text-white border border-gray-600">
                      <div className="flex items-center space-x-2">
                        <Loader2 className="w-4 h-4 animate-spin text-orange-400" />
                        <span className="text-sm">ƒêang t∆∞ v·∫•n...</span>
                      </div>
                    </div>
                  </div>
                )}

                {messages.length === 1 && !isLoading && (
                  <div className="space-y-2">
                    <p className="text-xs text-gray-400 text-center">G·ª£i √Ω c√¢u h·ªèi:</p>
                    {suggestedQuestions.map((question, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestedQuestion(question)}
                        className="w-full text-left p-2 bg-gray-700 hover:bg-orange-600 border border-gray-600 rounded-lg text-sm text-white transition-colors"
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              <div className="p-3 bg-gray-900 border-t border-gray-700">
                <div className="flex space-x-2">
                  <input
                    ref={inputRef}
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="H·ªèi v·ªÅ n·∫•u ƒÉn..."
                    className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-full focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-white placeholder-gray-400"
                    disabled={isLoading}
                  />
                  <button
                    onClick={sendMessage}
                    disabled={isLoading || !input.trim()}
                    className="p-2 bg-orange-600 text-white rounded-full hover:bg-orange-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Send className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default ChatBot;